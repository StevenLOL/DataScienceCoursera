trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
dim(faithful)
head(faithful)
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1)
# Model fit
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
lm1$fitted.values
dim(lm1$fitted.values)
lenght(lm1$fitted.values)
length(lm1$fitted.values)
dim(trainFaith)
# Predict a new value
coef(lm1)[1] + coef(lm1)[2]*80
lm1
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
coef(lm1)[1]
# Plot predictions - training and test
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
# Get training set/test set erros
# Calculate RMSE on training
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
# Calculate RMSE on test
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
dim(testFaith)
# Prediction intervals
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
pred1
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
# Same process with caret
modFit <- train(eruptions ~ waiting, data = trainFaith, method = "lm")
summary(modFit$finalModel)
modFit <- train(eruptions ~ waiting, data = trainFaith, method = "lm")
summary(modFit$finalModel)
## Predicting with regression, multiple covariates
# Example: predicting wages
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
# Get training/test sets
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
# Feature plot
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
# Plot age versus wage
qplot(age, wage, data = training)
# Plot age versus wage colour by jobclass
qplot(age, wage, colour = jobclass, data = training)
# plot age versus wage colour by education
qplot(age, wage, colour = education, data = training)
# Fit a linear model
modFit <- train(wage ~ age + jobclass + education, method = "lm", data = training)
finMod <- modFit$finalModel
print(modFit)
# Diagnostics
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
# Color by variables not used in the model
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
# Plot by index
plot(finMod$residuals,pch=19)
# Predicted versus truth in test set
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
# Use all covariates
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
## Predicting with trees
# Example: Iris Data
data(iris); library(ggplot2); library(caret)
names(iris)
table(iris$Species)
# Create training and test sets
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
# Iris petal widths/sepal width
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
# Plot Tree
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
# Prettier plots
if(require(rattle) == FALSE) install.packages("rattle")
install.packages("shiny")
getwd()
library(shiny)
runApp("./Chapter9.Developing_Data_Products/1. Introduction to Shiny/ui.R")
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", lable = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", label = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", label = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
actionButton(inputId = "go", label = "Update"),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- eventReactive(input$go, {
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
actionButton(inputId = "unif", label = "Uniform"),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = server)
## Basic html and getting input
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = server)
# Illustrating inputs and outputs in ui.R
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
h3('Illustrating outputs'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("odate")
)
))
server <- shinyServer(
function(input, output) {
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$odate <- renderPrint({input$date})
}
)
shinyApp(ui = ui, server = server)
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- shinyUI(
pageWithSidebar(
# Application title
headerPanel("Diabetes prediction"),
sidebarPanel(
numericInput('glucose', 'Glucose mg/dl', 90, min = 50, max = 200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
)
diabetesRisk <- function(glucose) glucose / 200
server <- shinyServer(
function(input, output) {
output$inputValue <- renderPrint({input$glucose})
output$prediction <- renderPrint({diabetesRisk(input$glucose)})
}
)
shinyApp(ui = ui, server = server)
ui <- shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mean',value = 70, min = 62, max = 74, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
server <- shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyApp(ui = ui, server = server)
## Experiment
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
x <<- 0
x <<- x + 1
y <<- 0
server <- shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2"),
actionButton("goButton", "Go!")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
server <- shinyServer(
function(input, output) {
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({
if (input$goButton == 0) "You have not pressed the button"
else if (input$goButton == 1) "you pressed it once"
else "OK quit pressing it"
})
}
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server, display.mode = 'showcase')
shinyApp(ui = ui, server = server)
?runApp
?shinyApp
library(manipulate)
manipulate(plot(1:x), x = slider(1, 1000))
library(manipulate)
myHist <- function(mu) {
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
if(require(rCharts) == FALSE) install.packages(rCharts)
require(rCharts)
install.packages(rChargs)
install.packages(rCharts)
require(devtools)
if(require(devtools) == FALSE) install.packages(devtools)
require(dev_tools)
install_github('rCharts', 'ramnathv')
install.packages(devtools)
require(devtools)
if(require(devtools) == FALSE) install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages(c('devtools', 'curl'))
install.packages("rcharts")
?nPlot
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
rPlot
?mPlot
install.packages("devtools")
libary(devtools)
library(devtools)
install.packages(devtools)
install.packages("devtools"
)
install.packages("base64enc")
install.packages("git2r")
R CMD check
check
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
install.packages("git2r")
install.packages("git24")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r") --with-libssl-prefix=-I/usr/local/opt/openssl/include
install.packages("git2r") --with-libssl-prefix=/usr/local/opt/openssl/include
?install.packges
??install.packages
?install.packages
install.packages("git2r", INSTALL_opts = "--with-libssl-prefix=/usr/local/opt/openssl/include")
sessionInfo()
install.packages(c("boot", "car", "class", "cluster", "codetools", "coin", "CORElearn", "crayon", "dplyr", "evaluate", "foreign", "gridExtra", "jsonlite", "kernlab", "KernSmooth", "knitr", "lattice", "lme4", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "party", "quantreg", "R6", "Rcpp", "RcppArmadillo", "rmarkdown", "rpart", "scales", "SparseM", "spatial", "survival", "UsingR"))
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
if(require(googleVis) == FALSE) install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
if(require(googleVis) == FALSE) install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
Fruits
M
print(M)
print
?print
