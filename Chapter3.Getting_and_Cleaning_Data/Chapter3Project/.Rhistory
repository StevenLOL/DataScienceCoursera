my_name <- c(my_char, "Li Xiaowei")
my_name
paste(my_name, collapse= " ")
paste("Hello", "world!", sep=" ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3,c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep= "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data/0
0/0
Inf - Inf
0
x <- 1:10
if(x>5)
x<-0
d=3L
d
y<-10f <- function(x) { y<-2                   y^2 + g(x)}g <- function(x) { x*y}
y<-10f <- function(x) {     y<-2                   y^2 + g(x)}g <- function(x) {     x*y}
y<-10f <- function(x) {     y<-2    y^2 + g(x)}g <- function(x) {     x*y}
y <- 10f <- function(x) {     y <- 2    y^2 + g(x)}g <- function(x) {     x*y}
y <- 10f <- function(x) {     y <- 2    y^2 + g(x)}g <- function(x) {     x*y}
y <- 10
f <- function(x) {     y <- 2    y^2 + g(x)}
f <- function(x) {    y <- 2    y^2 + g(x)}
f <- function(x) {    y <- 2    y^2 + g(x)}
y <- 10f <- function(x) {    y <- 2    y^2 + g(x)}g <- function(x) {     x*y}
f <- function(x) {    y <- 2    y^2 + g(x)}
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
y
sessionInfo()
swirl()
x
x[1:10]
x[is.na(x)]
is.na(x)
x
x[true]
x(true)
y <- x[!is.na(x)]
y
y[y>0]
y>0
is.na(x)
play()
is.na(x)
!is.na(x)
x[is.na(x)]
x[!is.na(x)]
x
nxt()
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "narf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
x*y
}
swirl()
my_vector < c(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?maxtrix
?matrix
matrxi(1:20, nrow=4, ncol=5)
matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
pations <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
ma_data
my_data
calss(my_data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE) == TRUE
(FALSE==TRUE) == FALSE
6=7
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
pla()
play()
identical("twins", "twins")
nxt()
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
head
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
play()
length(cls_list)
dim(cls_list)
dim(flags)
nxt()
as.character(cls_list)
dim(as.character(cls_list))
play()
class(as.character(cls_list))
length(as.character(cls_list))
nxt()
cls_vect <- sapply(flags, clss)
cls_vect <- sapply(flags, calss)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes,range)
shape_mat <- sapply(flash_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,,7,7))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags[,], unique)
unique_vals <- lapply(flags, unique)
unique-vals
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem)elem[2])
data(mtcards)
data(mtcars)
str(mtcard[1,])
str(mtcar[1,])
str(mtcars[1,])
mtcards
mtcars
sapply(mtcars, is.numeric)
lapply(mtcars, is.numeric)
sapply(mtcars, is.numeric)
is.numeric(mtcars[,1])
is.numeric(mtcars[,15])
is.numeric(mtcars[,0])
is.numeric(mtcars[,11])
runif(8, min=0, max=1)
?runif
sapply(c(1,2,3), runif)
sapply(c(1,2,30), runif)
sapply(c(1,2,30), runif(,min=1, max=9))
?nlevels
data(Orage)
data(Orange)
orange$Tree
Orange$Tree
?tapply
?rnorm
?runif
?gl
mean(runif(10))
mean(rnorm(10))
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(1000000))
mean(runif(10000))
range(runif(10))
range(rnorm(100))
rnomr(10)
rnorm(10)
?rnorm
?rep
?mapply
swirl()
swirl()
play()
dim(flags)
head(flags)
str(flags)
summary(flags)
nxt()
sapply(flags, uniqe)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
flags$landmass
table(1:10)
?table
nxt()
table(flasg$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plnats)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
length(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
0
exit()
info
info()
main()
main()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0,1, prob = c(0.3, 0.7))
flips <- sample(c(0,1) prob = c(0.3, 0.7))
flips <- sample(c(0,1), prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(c(0,1), 100, prob = 0,7)
flips2 <- rbinom(c(0,1), 100, prob = 0.7)
flips2 <- rbinom(n=100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnomr
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5)
rpois(5, lambda)
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
info()
bye()
swirl()
info()
main(0)
main()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cards
?cars
swirl()
info
info()
swirl()
library(swirl)
swirl()
head(cars)
plot(cards)
plots(cars)
plot(cars)
?plot
library(swirl)
swirl()
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
debug(ls)
ls
n
n
ls()
undebug(ls)
dataFolder <- "./UCI HAR Dataset"
x_train <- read.table(paste(dataFolder, "train/X_train.txt", sep = "/"), stringsAsFactors = FALSE)
y_train <- read.table(paste(dataFolder, "train/y_train.txt", sep = "/"), stringsAsFactors = FALSE)
subject_train <- read.table(paste(dataFolder, "train/subject_train.txt", sep = "/"), stringsAsFactors = FALSE)
x_test <- read.table(paste(dataFolder, "test/X_test.txt", sep = "/"), stringsAsFactors = FALSE)
y_test <- read.table(paste(dataFolder, "test/y_test.txt", sep = "/"), stringsAsFactors = FALSE)
subject_test <- read.table(paste(dataFolder, "test/subject_test.txt", sep = "/"), stringsAsFactors = FALSE)
activityLabels <- read.table(paste(dataFolder, "activity_labels.txt", sep = "/"), stringsAsFactors = FALSE)
features <- read.table(paste(dataFolder, "features.txt", sep = "/"), stringsAsFactors = FALSE)
## Step 1
# rbind the x_test and x_train as they are the same type of data, except in testing and training groups
# Applies to same to y_test and y_train, subject_test and subject_train
x <- rbind(x_test, x_train)
y <- rbind(y_test, y_train)
subject <- rbind(subject_test, subject_train)
# Name the column names of y and subject appropriately before binding to x
# Merge x, y and subjects by cind. Meaning, created 2 new columns "activity" and "subject
names(y) <- "activity"
names(subject) <- "subject"
oneDataset <- cbind(x, y, subject)
## Step 2
# The definition of measurements of mean and standard deviation is quite objective. I followed
# the "features_info.txt" file to select the measurements if the columen names contains either
# of "mean()", "std()" or "meanFreq()"
containsMeanStd <- grep("mean\\(\\)|std\\(\\)|meanFreq\\(\\)", features[, 2], ignore.case = TRUE)
# Subset the "oneDataset" by the "containsMeanStd"
measureMeanStd <- oneDataset[, containsMeanStd]
# cbind the activity and subject column
measureMeanStd <- cbind(measureMeanStd, activity = oneDataset$activity, subject = oneDataset$subject)
## Step 3
# Convert the activity indicators to activity names. This can be achieved by converting the "activity"
# column into factors first, then assign the activity names/labels to the levels of the factor column
measureMeanStd$activity <- as.factor(measureMeanStd$activity)
levels(measureMeanStd$activity) <- activityLabels[, 2]
## Step 4
# Assign the column names based on the feature names. The column names of "measureMeanStd" are still
# in the form like "V1", "V2" and etcs. The nice thing about the column name is the digits are still
# telling the index of the matching feature name in "features" data frame. For example, "V45" means the
# 45th feature, although it's the 11th column in the "measureMeanStd" data frame.
# Replace "V" into "", coerce into numeric, replace the special characters "(", ")", "-"
colNameIndex <- as.numeric(gsub("V", "", names(measureMeanStd)))
colNameIndex <- colNameIndex[!is.na(colNameIndex)]
names(measureMeanStd)[1:length(colNameIndex)] <- features[colNameIndex, 2]
names(measureMeanStd) <- gsub("\\(", "", names(measureMeanStd))
names(measureMeanStd) <- gsub("\\)", "", names(measureMeanStd))
names(measureMeanStd) <- gsub("\\-", "", names(measureMeanStd))
# Capitalize the first letter of "mean" and "std" to make the column names more readable and descriptive
# "fBodyGyroMeanFreqX" is more descriptive than "fBodyGyromeanFreqX"
names(measureMeanStd) <- gsub("mean", "Mean", names(measureMeanStd))
names(measureMeanStd) <- gsub("std", "Std", names(measureMeanStd))
## Step 5
# Use the "group_by" and "summarize_each" function from "dplyr" package to calculate the mean of each
# measure for each subject and activity. The result output is stored in "summarisedData.txt".
# summarizedData <- read.table("./summarisedData.txt", header = TRUE) will read the data
library(dplyr)
groupedData <- group_by(measureMeanStd, subject, activity)
summarisedData <- summarise_each(groupedData, funs(mean))
write.table(summarisedData, file = "./summarisedData.txt", row.name = FALSE)
setwd("./chapter3/chapter3project")
# The variable names all start with small case letter, and follow the file names
dataFolder <- "./UCI HAR Dataset"
x_train <- read.table(paste(dataFolder, "train/X_train.txt", sep = "/"), stringsAsFactors = FALSE)
y_train <- read.table(paste(dataFolder, "train/y_train.txt", sep = "/"), stringsAsFactors = FALSE)
subject_train <- read.table(paste(dataFolder, "train/subject_train.txt", sep = "/"), stringsAsFactors = FALSE)
x_test <- read.table(paste(dataFolder, "test/X_test.txt", sep = "/"), stringsAsFactors = FALSE)
y_test <- read.table(paste(dataFolder, "test/y_test.txt", sep = "/"), stringsAsFactors = FALSE)
subject_test <- read.table(paste(dataFolder, "test/subject_test.txt", sep = "/"), stringsAsFactors = FALSE)
activityLabels <- read.table(paste(dataFolder, "activity_labels.txt", sep = "/"), stringsAsFactors = FALSE)
features <- read.table(paste(dataFolder, "features.txt", sep = "/"), stringsAsFactors = FALSE)
## Step 1
# rbind the x_test and x_train as they are the same type of data, except in testing and training groups
# Applies to same to y_test and y_train, subject_test and subject_train
x <- rbind(x_test, x_train)
y <- rbind(y_test, y_train)
subject <- rbind(subject_test, subject_train)
# Name the column names of y and subject appropriately before binding to x
# Merge x, y and subjects by cind. Meaning, created 2 new columns "activity" and "subject
names(y) <- "activity"
names(subject) <- "subject"
oneDataset <- cbind(x, y, subject)
## Step 2
# The definition of measurements of mean and standard deviation is quite objective. I followed
# the "features_info.txt" file to select the measurements if the columen names contains either
# of "mean()", "std()" or "meanFreq()"
containsMeanStd <- grep("mean\\(\\)|std\\(\\)|meanFreq\\(\\)", features[, 2], ignore.case = TRUE)
# Subset the "oneDataset" by the "containsMeanStd"
measureMeanStd <- oneDataset[, containsMeanStd]
# cbind the activity and subject column
measureMeanStd <- cbind(measureMeanStd, activity = oneDataset$activity, subject = oneDataset$subject)
## Step 3
# Convert the activity indicators to activity names. This can be achieved by converting the "activity"
# column into factors first, then assign the activity names/labels to the levels of the factor column
measureMeanStd$activity <- as.factor(measureMeanStd$activity)
levels(measureMeanStd$activity) <- activityLabels[, 2]
## Step 4
# Assign the column names based on the feature names. The column names of "measureMeanStd" are still
# in the form like "V1", "V2" and etcs. The nice thing about the column name is the digits are still
# telling the index of the matching feature name in "features" data frame. For example, "V45" means the
# 45th feature, although it's the 11th column in the "measureMeanStd" data frame.
# Replace "V" into "", coerce into numeric, replace the special characters "(", ")", "-"
colNameIndex <- as.numeric(gsub("V", "", names(measureMeanStd)))
colNameIndex <- colNameIndex[!is.na(colNameIndex)]
names(measureMeanStd)[1:length(colNameIndex)] <- features[colNameIndex, 2]
names(measureMeanStd) <- gsub("\\(", "", names(measureMeanStd))
names(measureMeanStd) <- gsub("\\)", "", names(measureMeanStd))
names(measureMeanStd) <- gsub("\\-", "", names(measureMeanStd))
# Capitalize the first letter of "mean" and "std" to make the column names more readable and descriptive
# "fBodyGyroMeanFreqX" is more descriptive than "fBodyGyromeanFreqX"
names(measureMeanStd) <- gsub("mean", "Mean", names(measureMeanStd))
names(measureMeanStd) <- gsub("std", "Std", names(measureMeanStd))
## Step 5
# Use the "group_by" and "summarize_each" function from "dplyr" package to calculate the mean of each
# measure for each subject and activity. The result output is stored in "summarisedData.txt".
# summarizedData <- read.table("./summarisedData.txt", header = TRUE) will read the data
library(dplyr)
groupedData <- group_by(measureMeanStd, subject, activity)
summarisedData <- summarise_each(groupedData, funs(mean))
write.table(summarisedData, file = "./summarisedData.txt", row.name = FALSE)
names(summarisedData)
class(summarisedData$subject)
class(summarisedData$activity)
View(activityLabels)
activityLabels[,2]
?write.table
write.table(summarisedData, "./test.txt", row.name = FALSE, fileEncoding = "txt")
write.table(summarisedData, "./test.txt", row.name = FALSE, fileEncoding = ".txt")
write.table(summarisedData, "./test.txt", row.name = FALSE, fileEncoding = "*txt")
if(!file.exists("./data")) {dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "crul")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames = strsplit(names(cameraData), "\.")
splitNames[[5]]
splitNames = strsplit(names(cameraData), "\\.")
splitNames[[5]]
splitNames[[6]]
