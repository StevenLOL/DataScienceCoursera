unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cards
?cars
swirl()
info
info()
swirl()
library(swirl)
swirl()
head(cars)
plot(cards)
plots(cars)
plot(cars)
?plot
library(swirl)
swirl()
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
debug(ls)
ls
n
n
ls()
undebug(ls)
dir()
library(kernlab)
install.pacakges("kenlab")
if(require(kernlab) == F) {
install.packages("kenlab")
}
if(require(kernlab) == F) {
install.packages("kernlab")
}
library(kernlab)
data(spam)
?data
str(spam[, 1:5])
str(spam)
set.seed(3435)
?rbinom
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
log10(0)
plot(log10(trainSpam$capitalAve ) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] +1))
plot(log10(trainSpam[, 1:4] + 1))
plot(trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam[, 1])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1:4])
plot(trainSpam[, 1:3])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1])
plot(trainSpam[, 5])
plot(trainSpam[, 1:5])
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hCluster = hclust(dist(trainSpam[, 1:57]))
plot(hCluster)
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
t <- t(trainSpam)
?
t
t
head(t)
str(t)
t[1, 1:4]
mtcars
rm(t)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(t(mtcars))
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
?dist
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
head(trainspam$numType)
head(trainSpam$numType)
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
)
costFunction
cvError
names(trainSpam)[1]
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
?reformulate
names(trainSpam)
head(trainSpam)
table(trainSpam$numType)
table(trainSpam$Type)
summary(trainSpam$Type)
str(trainSpam$Type)
table(trainSpam$type)
cvError
?reformulate
?glm
?cv.glm
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
setwd("./Chapter6.Statistical_Inference/Chapter6Project/")
dir()
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
# Conver 'Mont' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
xyplot(Ozone ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
data("ToothGrowth")
ToothGrowth
xyplot(len ~ supp | dose, data = ToothGrowth, layout = c(3,2))
xyplot(len ~ supp | dose, data = ToothGrowth, layout = c(3,2))
str(ToothGrowth)
str(airquality)
tooth <- transform(ToothGrowth, dose = factor(dose))
xyplot(len ~ supp | dose, data = tooth, layout = c(3,2))
str(tooth)
tooth
xyplot(len ~ supp | dose, data = tooth, layout = c(3,2))
xyplot(len ~ supp | dose, data = tooth, layout = c(6,1))
xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
xyplot(len ~ dose | supp, data = tooth, layout = c(3,1))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
par(mfrow = c(2, 1))
xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
plot1 <- xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
plot2 <- xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
print(plot1, plot2)
print(plot1, position = c(0,0,0.5,1), more = TRUE)
print(plot2, position = c(0.5,0,1,1))
library(lattice)
library(ggplot2)
tooth <- transform(ToothGrowth, dose = factor(dose))
plot1 <- xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
plot2 <- xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
print(plot1, position = c(0,0,0.5,1), more = TRUE)
print(plot2, position = c(0.5,0,1,1))
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel_smooth)
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel_smooth())
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel.smooth)
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel.abline(lm(dose~supp)))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel.abline(lm(y~x)))
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel.abline(lm(tooth$dose ~ tooth$len)))
lm(tooth$dose ~ tooth$len)
lm(tooth$len ~ tooth$dose)
xyplot(len ~ dose | supp, data = tooth, layout = c(2,1), panel = panel.abline(lm(tooth$len ~ tooth$dose)))
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
# x is 0.5
pbeta(0.5, 2, 1)
# p is 0.5
qbeta(0.5, 2, 1)
## Expectations
if(require(UsingR) == F) install.packages(("UsingR"))
library(UsingR)
data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child, col = "blue", breaks = 100)
meanChild <- mean(galton$child)
lines(rep(meanChild, 100), seq(0, 150, length = 100), col = "red", lwd = 5)
n <- 5
pvals <- seq(0, 1, length = 1000)
plot(c(0, 1), c(0, 1.2), type = "n", frame = FALSE, xlab = "p", ylab = "likelihood")
text((0:n)/n, 1.1, as.character(0:n))
sapply(0:n, function(x) {
phat <- x/n
if(x == 0) lines(pvals, ((1 - pvals)/(1 - phat))^(n - x), lwd = 3)
else if(x == n) lines(pvals, (pvals/phat)^x, lwd = 3)
else lines(pvals, (pvals/phat)^x * ((1 - pvals)/(1 - phat))^(n - x), lwd = 3)
})
title(paste("Likelihoods for n = ", n))
plot(pvals, dbinom(7, 8, pvals) / dbinom(7, 8, 7/8), lwd = 3, frame = FALSE, type = "l",
xlab = "p", ylab = "likelihood")
zvals <- seq(-3, 3, length = 1000)
plot(zvals, dnorm(zvals), type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
zvals
sapply(-3:3, function(k) abline(v = k))
plot(zvals, dnorm(zvals), type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
sapply(-3:3, function(k) abline(v = k))
ppois(3, lambda = 2.5 * 4)
pbinom(2, size = 500, prob = .01)
ppois(2, lambda = 500 * .01)
## Standard error of the mean
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
# Standard uniforms have variance 1/12
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1/sqrt(12 * n)
# Poisson(4) have variance 4
sd(apply(matrix(rpois(nosim * n, 4), nosim), 1, mean))
2/sqrt(n)
# Fair coin flips have variance 0.25
sd(apply(matrix(sample(0:1, nosim * n, replace = TRUE), nosim), 1, mean))
1/(2 * sqrt((n)))
## Binomial distribution
choose(8, 7) * .5 ^ 8 + choose(8, 8) * .5 ^ 8
pbinom(6, size = 8, prob = .5, lower.tail = FALSE)
round(1/sqrt(10^(1:6)), 3)
## Normal distribution
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1160 - 1020) / 50, lower.tail = FALSE)
qnorm(0.75, mean = 1020, sd = 50)
qnorm(0.75, mean = 1020, sd = 50, lower.tail = FALSE)
qnorm(0.75, mean = 1020, sd = 50, lower.tail = TRUE)
qnorm(0.75, mean = 1020, sd = 50)
## Poisson
ppois(3, lambda = 2.5 * 4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
## Asympototics and LLN
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
menas <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means
menas <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
meanas
menas
## Confidence interval
library(UsingR)
data("father.son")
x <- father.son$sheight
(mean(x) + c(1, -1) * qnorm(0.975) * sd(x)/sqrt(length(x)))/12
x
str(x)
str(father.son)
mean(x)
mean(father.son$fheight)
mean(father.son$sheight)
sd(father.son$fheight)
sd(father.son$sheight)
# 56 of 100 votes
0.56 + c(-1, 1) * qnorm(0.975) * sqrt(0.56 * 0.44/100)
library(UsingR)
data("father.son")
x <- father.son$sheight
(mean(x) + c(1, -1) * qnorm(0.975) * sd(x)/sqrt(length(x)))/12
mean(x)
sd(x)
length(x)
qnorm(0.975)
sd9x
sd(x)
mean(x)
mean(father.son$fheight)
# 56 of 100 votes
0.56 + c(-1, 1) * qnorm(0.975) * sqrt(0.56 * 0.44/100)
binom.test(56, 100)$conf.int
n <- 20
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
n <- 100
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
?sapply
plot(pvals, coverage, type = "l")
pvals
ptemp <- rbinom(nosim, prob = 0.1, size = n)/n
ptemp
?rbinom
ptemp <- rbinom(nosim, prob = 0.1, size = n)/n
ptemp
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
n <- 100
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage2 <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage2, type = "l")
abline(h = 0.95)
# Adding 2 successes and failures
n <- 20
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {
phats <- (rbinom(nosim, prob = p, size = n) + 2)/(n + 4)
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(pvals, coverage, type = "l")
abline(h = 0.95)
x <- 5
t <- 94.32
lambda <- x/t
round(lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t), 3)
poisson.test(x, T = 94.32)$conf
lambda <- x/t
round(lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t), 3)
poisson.test(x, T = 94.32)$conf
# Simulating the poisson coverage
lambdavals <- seq(0.005, 0.1, by = 0.01)
nosim <- 1000
t <- 100
coverage <- sapply(lambdavals, function(lambda) {
lhats <- rpois(nosim, lambda = lambda * t)/t
ll <- lhats - qnorm(0.975) * sqrt(lhats/t)
ul <- lhats + qnorm(0.975) * sqrt(lhats/t)
mean(ll < lambda & ul > lambda)
})
plot(lambdavals, coverage, type = "l")
abline(h = 0.95)
## T confidence intervals example
data(sleep)
head(sleep)
sleep
g1 <- sleep$extra[1:10]; g2 <- sleep$extra[11:20]
g1
g2
difference <- g2 - g1
difference
mn <- mean(difference); s <- sd(difference); n <- 10
mn
s
n
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
sleep
ToothGrowth
gVC <- tooth[which(tooth$supp == "VC")]
gVC <- tooth[which(tooth$supp == "VC"), ]
gOJ <- tooth[which(tooth$supp == "OJ"), ]
gVC
gOJ
gVC[1] <- tooth[which(tooth$supp == "VC"), ]
gVC1 <- tooth[which(tooth$supp == "VC" & tooth$dose == 0.5), ]
gVC1
rm(gVC)
gVC1 <- tooth[which(tooth$supp == "VC" & tooth$dose == 0.5), ]
gVC2 <- tooth[which(tooth$supp == "VC" & tooth$dose == 1), ]
gVC3 <- tooth[which(tooth$supp == "VC" & tooth$dose == 2), ]
gOJ1 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 0.5), ]
gOJ2 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 1), ]
gOJ3 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 2), ]
dfSupp1 <- gVC1 - gOJ1
gVC1 <- tooth[which(tooth$supp == "VC" & tooth$dose == 0.5), 1]
gVC2 <- tooth[which(tooth$supp == "VC" & tooth$dose == 1), 1]
gVC3 <- tooth[which(tooth$supp == "VC" & tooth$dose == 2), 1]
gOJ1 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 0.5), 1]
gOJ2 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 1), 1]
gOJ3 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 2), 1]
dfSupp1 <- gVC1 - gOJ1
dfSupp1
dfSupp2 <- gVC2 - gOJ2
dfSupp3 <- gVC3 - gOJ3
dfSupp1
dfSupp2
dfSupp3
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(dfSupp1)
t.test(gVC1, gOJ1, paired = TRUE)
t.test(gVC2, gOJ2, paired = TRUE)
t.test(gVC3, gOJ3, paired = TRUE)
t.test(gVC3, gOJ3, paired = TRUE)$conf
t.test(gVC3, gOJ3, paired = TRUE)$conf.int
t.test(gVC1, gOJ1, paired = TRUE)
t.test(gVC1, gOJ1, paired = FALSE)
t.test(gVC1, gOJ1, paired = TRUE)
t.test(gVC2, gOJ2, paired = TRUE)
t.test(gVC3, gOJ3, paired = TRUE)
t.test(gVC3, gOJ3, paired = FALSE)
t.test.(gVC1, gVC2, paired = TRUE)
t.test(gVC1, gVC2, paired = TRUE)
t.test(gVC2, gVC3, paired = TRUE)
t.test(gOJ1, gOJ2, paired = TRUE)
t.test(gOJ2, gOJ3, paired = TRUE)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paird = TRUE, data = sleep)
## Independent group T intervals
sp <- sqrt(((8 - 1) * 15.34^2 + (21 - 1) * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, (8 + 21 - 2)) * sp * (1/8 + 1/21)^.5
x1 <- sleep$extra[sleep$group == 1]
x2 <- sleep$extra[sleep$group == 2]
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt(((n1 - 1) * sd(x1)^2 + (n2 - 1) * sd(x2)^2) / (n1 + n2 - 2))
sp
x1 <- sleep$extra[sleep$group == 1]
x2 <- sleep$extra[sleep$group == 2]
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt(((n1 - 1) * sd(x1)^2 + (n2 - 1) * sd(x2)^2) / (n1 + n2 - 2))
# mean difference
md <- mean(g2) - mean(g1)
# standard error of mean difference
semd <- sp * sqrt(1/n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) *semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data("ChickWeight"); library(reshape2)
