Orange$Tree
?tapply
?rnorm
?runif
?gl
mean(runif(10))
mean(rnorm(10))
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(1000000))
mean(runif(10000))
range(runif(10))
range(rnorm(100))
rnomr(10)
rnorm(10)
?rnorm
?rep
?mapply
swirl()
swirl()
play()
dim(flags)
head(flags)
str(flags)
summary(flags)
nxt()
sapply(flags, uniqe)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
flags$landmass
table(1:10)
?table
nxt()
table(flasg$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plnats)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
length(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
0
exit()
info
info()
main()
main()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0,1, prob = c(0.3, 0.7))
flips <- sample(c(0,1) prob = c(0.3, 0.7))
flips <- sample(c(0,1), prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(c(0,1), 100, prob = 0,7)
flips2 <- rbinom(c(0,1), 100, prob = 0.7)
flips2 <- rbinom(n=100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnomr
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5)
rpois(5, lambda)
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
info()
bye()
swirl()
info()
main(0)
main()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cards
?cars
swirl()
info
info()
swirl()
library(swirl)
swirl()
head(cars)
plot(cards)
plots(cars)
plot(cars)
?plot
library(swirl)
swirl()
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
debug(ls)
ls
n
n
ls()
undebug(ls)
dir()
library(kernlab)
install.pacakges("kenlab")
if(require(kernlab) == F) {
install.packages("kenlab")
}
if(require(kernlab) == F) {
install.packages("kernlab")
}
library(kernlab)
data(spam)
?data
str(spam[, 1:5])
str(spam)
set.seed(3435)
?rbinom
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
log10(0)
plot(log10(trainSpam$capitalAve ) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] +1))
plot(log10(trainSpam[, 1:4] + 1))
plot(trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam[, 1])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1:4])
plot(trainSpam[, 1:3])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1])
plot(trainSpam[, 5])
plot(trainSpam[, 1:5])
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hCluster = hclust(dist(trainSpam[, 1:57]))
plot(hCluster)
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
t <- t(trainSpam)
?
t
t
head(t)
str(t)
t[1, 1:4]
mtcars
rm(t)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(t(mtcars))
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
?dist
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
head(trainspam$numType)
head(trainSpam$numType)
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
)
costFunction
cvError
names(trainSpam)[1]
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
?reformulate
names(trainSpam)
head(trainSpam)
table(trainSpam$numType)
table(trainSpam$Type)
summary(trainSpam$Type)
str(trainSpam$Type)
table(trainSpam$type)
cvError
?reformulate
?glm
?cv.glm
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
setwd("./Chapter6.Statistical_Inference/")
dir()
dir()
swirl()
library(swirl)
swirl()
swirl()
100/sqrt(10)
100/sqrt(100)
10/sqrt(10)
10/sqrt(100)
2
swirl)()
swirl()
qt(2.5, 15, lower.tail = FALSE)
pt(2.5, 15, lower.tail = FALSE)
qnorm(.95)
library(ggplot2)
swirl()
(32 - 30)/(10/sqrt(16))
15
qt(.95, 15)
dim(fs)
t.test(fs$fheight - fs$sheight)
11.7885 * sd(fs$sheight - fs$fheight)/sqrt(1078)
myin
mybin
8
library(ggplot2)
swril()
swirl()
asdf
qt(99)
at(.99. 15)
qt(.99, 15)
qnorm(.99)
qnorm(.99, lower.tail = FALSE)
pnorm(2)
pnorm(2, lower.tail = FALSe)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, 8, prob = .5, lower.tail = FALSE)
pbinom(7, 8, prob = .5, lower.tail = FALSE)
pbinom(7, 8, prob = .5, lower.tail = TRUE)
pbino(9, 100, lambda = 5, lower.tail = FALSE)
pbinom(9, 100, lambda = 5, lower.tail = FALSE)
pbinom(9, 100, lower.tail = FALSE)
pbinom(9, 100, lower.tail = FALSE)
pbinom(9, 100, prob = .1, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
myplot(34)
exit()
0
exit()
quit()
?
)
swirl()
nxt()
exit()
play()
exit()
help()
library(manipulate)
mu0 = 30
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes = (x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
qnorm(0,95)
qnorm(0.95)
qnorm(0.975)
pnorm(1)
pnorm(1, lower.tail = FALSE)
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = 0.8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
pt(2.5, 15, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
nxt()
myplot(33.3)
library(ggplot2)
myplot(33.3)
exit()
0
info()
bye()
swirl()
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30 + z, mean = 30, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+2, mena = 32, sd = 1, lower.tail = FALSE)
pnorm(30+z, mena = 32, sd = 1, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd = 1, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd = 2, lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd = 2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd = 1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd = 1, type = "one.sample", alt = "one.sided")$delta
pValues <- rep(NA, 1000)
set.seed(1010093)
pValues <- rep(NA, 1000)
for(i in 1:1000) {
y <- norm(20)
x <- norm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
}
sum(pValues < 0.05)
set.seed(1010093)
pValues <- rep(NA, 1000)
for(i in 1:1000) {
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
}
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
set.seed(1010093)
pValues <- rep(NA, 1000)
for(i in 1:1000) {
y <- rnorm(20)
# First 500 beta = 0, last 500 beta = 2
if(i <= 500) {y <- rnorm(20)} else{ y <- rnorm(20, mean = 2*x)}
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
}
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
table(p.adjust(pVa, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues, mtehod = "BH") < 0.05, trueStatus)
table(p.adjust(pValues, mtehod = "BH") < 0.05, trueStatus)
table(p.adjust(pValues, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues, mtehod = "BH") < 0.05, trueStatus)
table(p.adjust(pValues, method = "BH") < 0.05, trueStatus)
par(mfrow = c(1,2))
plot(pValues, p.adjust(pValues, method = "bonferroni"), pch = 19)
plot(pValues, p.adjust(pValues, method = "BH"), pch = 19)
library(UsingR)
data("father.son")
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
resampledMedians <- apply(resamples, 1, median)
x
n
dim(resamples)
dim(resampledMedians)
len(resampledMedians)
length(resampledMedians)
str(x)
length(x)
n
resamples <- matrix(sample(x, n * B, replace = TRUE), B, N)
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, c(0.025, 0.975))
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "balck", fill = "lightblue", binwidth = 0.05)
g
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "balck", fill = "lightblue", binwidth = 0.05)
g
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C")]
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1:10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
subdata
y
group
str(subdata)
observedStat
permutations
observedStat
y
group
subdata
mean(permutations > observedStat)
observedStat
mean(permutations > observedStat)
browseURL("knitr.html")
browseURL("knitr.html")
?mkdir
