modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
# Plot Tree
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
# Prettier plots
if(require(rattle) == FALSE) install.packages("rattle")
install.packages("shiny")
getwd()
library(shiny)
runApp("./Chapter9.Developing_Data_Products/1. Introduction to Shiny/ui.R")
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", lable = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", label = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
actionButton(inputId = "clicks", label = "Click me"),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
actionButton(inputId = "go", label = "Update"),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
data <- eventReactive(input$go, {
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate(input$title)) # data is reactive expression, need '()'
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
actionButton(inputId = "unif", label = "Uniform"),
plotOutput("hist")
)
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = server)
## Basic html and getting input
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = server)
# Illustrating inputs and outputs in ui.R
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
h3('Illustrating outputs'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("odate")
)
))
server <- shinyServer(
function(input, output) {
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$odate <- renderPrint({input$date})
}
)
shinyApp(ui = ui, server = server)
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- shinyUI(
pageWithSidebar(
# Application title
headerPanel("Diabetes prediction"),
sidebarPanel(
numericInput('glucose', 'Glucose mg/dl', 90, min = 50, max = 200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
)
diabetesRisk <- function(glucose) glucose / 200
server <- shinyServer(
function(input, output) {
output$inputValue <- renderPrint({input$glucose})
output$prediction <- renderPrint({diabetesRisk(input$glucose)})
}
)
shinyApp(ui = ui, server = server)
ui <- shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mean',value = 70, min = 62, max = 74, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
server <- shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyApp(ui = ui, server = server)
## Experiment
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
x <<- 0
x <<- x + 1
y <<- 0
server <- shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2"),
actionButton("goButton", "Go!")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
server <- shinyServer(
function(input, output) {
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({
if (input$goButton == 0) "You have not pressed the button"
else if (input$goButton == 1) "you pressed it once"
else "OK quit pressing it"
})
}
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server, display.mode = 'showcase')
shinyApp(ui = ui, server = server)
?runApp
?shinyApp
library(manipulate)
manipulate(plot(1:x), x = slider(1, 1000))
library(manipulate)
myHist <- function(mu) {
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
if(require(rCharts) == FALSE) install.packages(rCharts)
require(rCharts)
install.packages(rChargs)
install.packages(rCharts)
require(devtools)
if(require(devtools) == FALSE) install.packages(devtools)
require(dev_tools)
install_github('rCharts', 'ramnathv')
install.packages(devtools)
require(devtools)
if(require(devtools) == FALSE) install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages(c('devtools', 'curl'))
install.packages("rcharts")
?nPlot
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
rPlot
?mPlot
install.packages("devtools")
libary(devtools)
library(devtools)
install.packages(devtools)
install.packages("devtools"
)
install.packages("base64enc")
install.packages("git2r")
R CMD check
check
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
install.packages("git2r")
install.packages("git24")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r") --with-libssl-prefix=-I/usr/local/opt/openssl/include
install.packages("git2r") --with-libssl-prefix=/usr/local/opt/openssl/include
?install.packges
??install.packages
?install.packages
install.packages("git2r", INSTALL_opts = "--with-libssl-prefix=/usr/local/opt/openssl/include")
sessionInfo()
install.packages(c("boot", "car", "class", "cluster", "codetools", "coin", "CORElearn", "crayon", "dplyr", "evaluate", "foreign", "gridExtra", "jsonlite", "kernlab", "KernSmooth", "knitr", "lattice", "lme4", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "party", "quantreg", "R6", "Rcpp", "RcppArmadillo", "rmarkdown", "rpart", "scales", "SparseM", "spatial", "survival", "UsingR"))
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
if(require(googleVis) == FALSE) install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
if(require(googleVis) == FALSE) install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
Fruits
M
print(M)
print
?print
p <- ncol(x)
sys.getenv()
Sys.getenv()
install('shiny')
package.install('shiny')
install.packages('shiny')
shiny::runApp('Chapter9.Developing_Data_Products/Chapter9Project')
getwd()
setwd('/Chapter9.*')
setwd('/Chapter9.Developing_Data_Products')
setwd('/Chapter9.Developing_Data_Product')
setwd('./Chapter9.Developing_Data_Product')
getwd()
setwd("/Chapter9.Developing_Data_Product")
setwd("/Chapter9.Developing_Data_Products")
setwd("/Chapter9.Developing_Data_Products/")
getwd()
setwd("./Chapter6.Statistical_Inference/")
setwd("..")
getwd()
setwd("./Chapter9.Developing_Data_Products")
shiny::runApp('Chapter9Project')
setwd("./Chapter9Project)")
dir()
setwd("./Chapter9Project")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("../..")
getwd()
setwd("./Chapter6.Statistical_Inference/")
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
pbeta(0.5, 2, 1)
qbeta(0.5, 2, 1)
if(require(UsingR) == F) install.packages(("UsingR"))
library(UsingR)
data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
if(require(manipulate) == F) install.pacakge("manipulate")
if(require(manipulate) == F) install.pacakge("manipulate")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
if(require(manipulate) == F) install.pacakge("Manipulate")
if(require(Manipulate) == F) install.pacakge("Manipulate")
data(galton)
library(manipulate)
hist(galton$child, col = "blue", breaks = 100)
data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$child, col = "blue", breaks = 100)
meanChild <- mean(galton$child)
lines(rep(meanChild, 100), seq(0, 150, length = 100), col = "red", lwd = 5)
n <- 5
pvals <- seq(0, 1, length = 1000)
plot(c(0, 1), c(0, 1.2), type = "n", frame = FALSE, xlab = "p", ylab = "likelihood")
text((0:n)/n, 1.1, as.character(0:n))
sapply(0:n, function(x) {
phat <- x/n
if(x == 0) lines(pvals, ((1 - pvals)/(1 - phat))^(n - x), lwd = 3)
else if(x == n) lines(pvals, (pvals/phat)^x, lwd = 3)
else lines(pvals, (pvals/phat)^x * ((1 - pvals)/(1 - phat))^(n - x), lwd = 3)
})
title(paste("Likelihoods for n = ", n))
plot(pvals, dbinom(7, 8, pvals) / dbinom(7, 8, 7/8), lwd = 3, frame = FALSE, type = "l",
xlab = "p", ylab = "likelihood")
zvals <- seq(-3, 3, length = 1000)
plot(zvals, dnorm(zvals), type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
sapply(-3:3, function(k) abline(v = k))
ppois(3, lambda = 2.5 * 4)
pbinom(2, size = 500, prob = .01)
shiny::runApp('~/Google Drive/Study/Data Science/Assignments/Chapter9.Developing_Data_Products/Chapter9Project')
install.packages(c("assertthat", "curl", "devtools", "git2r", "httr", "jsonlite", "memoise", "R6", "Rcpp", "scales", "stringi", "tibble", "withr"))
