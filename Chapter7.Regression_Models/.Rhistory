rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
info()
bye()
swirl()
info()
main(0)
main()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cards
?cars
swirl()
info
info()
swirl()
library(swirl)
swirl()
head(cars)
plot(cards)
plots(cars)
plot(cars)
?plot
library(swirl)
swirl()
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
debug(ls)
ls
n
n
ls()
undebug(ls)
dir()
library(kernlab)
install.pacakges("kenlab")
if(require(kernlab) == F) {
install.packages("kenlab")
}
if(require(kernlab) == F) {
install.packages("kernlab")
}
library(kernlab)
data(spam)
?data
str(spam[, 1:5])
str(spam)
set.seed(3435)
?rbinom
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
log10(0)
plot(log10(trainSpam$capitalAve ) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] +1))
plot(log10(trainSpam[, 1:4] + 1))
plot(trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$capitalAve)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(trainSpam[, 1])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1:4])
plot(trainSpam[, 1:3])
plot(trainSpam[, 1:2])
plot(trainSpam[, 1])
plot(trainSpam[, 5])
plot(trainSpam[, 1:5])
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hCluster = hclust(dist(trainSpam[, 1:57]))
plot(hCluster)
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
t <- t(trainSpam)
?
t
t
head(t)
str(t)
t[1, 1:4]
mtcars
rm(t)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(t(mtcars))
hclust_model <- hclust(dist1)
plot(hclust_model)
dist1 <- dist(mtcars)
hclust_model <- hclust(dist1)
plot(hclust_model)
?dist
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
head(trainspam$numType)
head(trainSpam$numType)
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
)
costFunction
cvError
names(trainSpam)[1]
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], reponse = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
?reformulate
names(trainSpam)
head(trainSpam)
table(trainSpam$numType)
table(trainSpam$Type)
summary(trainSpam$Type)
str(trainSpam$Type)
table(trainSpam$type)
cvError
?reformulate
?glm
?cv.glm
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
mns = NULL
for (i in 1:1000) mns = c(mns, mean(runif(40)))
hist(mns)
set.seed(1)
lambda = 0.2
nosim <- 1000
n <- 40
exp =  NULL
for (i in 1:1000) exp = rbind(exp, rexp(n, lambda))
expMean <- apply(exp, 1, mean)
hist(expMean, main = "Average of simulations", xlab = "Average", breaks = 30)
abline(v = mean(expMean), col = 3, lwd = 5)
abline(v = 1/lambda, col = 2, lwd = 3)
dst <- density(expMean)
plot(dst$x, dst$y, type = "n", main = "The distribution of sample mean", xlab = "Mean", ylab = "Density")
lines(seq(3, 7, length = 100), dnorm(seq(3, 7, length = 100), mean = 5, sd = (1/lambda)/sqrt(n)), col = grey(.8), lwd = 3)
lines(dst$x, dst$y, lwd = 2)
data("ToothGrowth")
library(lattice)
library(ggplot2)
tooth <- transform(ToothGrowth, dose = factor(dose))
plot1 <- xyplot(len ~ dose | supp, data = tooth, layout = c(2,1))
plot2 <- xyplot(len ~ supp | dose, data = tooth, layout = c(3,1))
print(plot1, position = c(0,0,0.5,1), more = TRUE)
print(plot2, position = c(0.5,0,1,1))
gVC1 <- tooth[which(tooth$supp == "VC" & tooth$dose == 0.5), 1]
gVC2 <- tooth[which(tooth$supp == "VC" & tooth$dose == 1), 1]
gVC3 <- tooth[which(tooth$supp == "VC" & tooth$dose == 2), 1]
gOJ1 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 0.5), 1]
gOJ2 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 1), 1]
gOJ3 <- tooth[which(tooth$supp == "OJ" & tooth$dose == 2), 1]
t.test(gVC1, gOJ1, paired = TRUE)$conf
t.test(gVC2, gOJ2, paired = TRUE)$conf
t.test(gVC3, gOJ3, paired = TRUE)$conf
t.test(gVC1, gVC2, paired = TRUE)$conf
t.test(gVC2, gVC3, paired = TRUE)$conf
t.test(gOJ1, gOJ2, paired = TRUE)$conf
t.test(gOJ2, gOJ3, paired = TRUE)$conf
mean(gVC1)
mena(gOJ1)
mean(gOJ1)
t.test(gVC1, gOJ1, paired = TRUE)$conf
?t.test
mean(gVC1) - mean(gOJ1)
t.test(gVC1, gVC2, paired = TRUE)$conf
t.test(gVC1, gVC2, paired = TRUE)
str(t.test(gVC1, gVC2, paired = TRUE))
str(t.test(gVC1, gVC2, paired = TRUE))$conf.int
t.test(gVC1, gVC2, paired = TRUE)$conf
t.test(gVC1, gVC2, paired = TRUE)$conf.int
str(t.test(gVC1, gVC2, paired = TRUE)$conf.int)
class(t.test(gVC1, gVC2, paired = TRUE)$conf.int)
t.test(gVC1, gVC2, paired = TRUE)$conf.int[1:2]
t.test(gVC1, gVC2, paired = TRUE)$conf[1:2]
?ToothGrowth
t.test(gVC1, gVC2, paired = TRUE)
t.test(gVC1, gVC2, paired = TRUE)$conf
session*()
sessionInfo()
sessionInfo()
install.packages("car")
install.packages("SparseM")
setwd("./Chapter7.Regression_Models/")
dir()
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial",ravenData)
lodds <- predict(mdl, data.frame(ravenData = c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1 + exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpis(1000, 50))
var(rpois(1000, 50))
nxt()
heat(hits)
head(hits)
class(hits[, 'date'])
as.integer(head(hits[, 'date']))
mdl <- glm(visits ~ date, possion, hits)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 3))
exp(confint(mdl, 2))
which.max(hits[, 'visits'])
hits[701,]
hits[704,]
lambda <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704] - qpois(.95, lambda)
lambda <- qpois(.95, lambda) mdl$fitted.values[704]
lambda <- qpois(.95, lambda) - mdl$fitted.values[704]
bye()
library(MASS)
data(shuttle)
head(shuttle)
requires(packageName())
requires(packageName
)
require(packageName) == TRUE
if(requrie(packageName) == FALSE) install.packages("packageName")
if(require(packageName) == FALSE) install.packages("packageName")
library(packagename)
if(require(packageName) == FALSE) install.packages("packagename")
install.packages("packagename")
library(aod)
install.packages("aod")
if(require(aod) == FALSE) install.packages("aod")
library(aod)
if(require(ggplot2) == FALSE) install.packages("ggplot2")
library(ggplot2)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
head(mydata)
dim(mydata)
summary(mydata)
sapply(mydata, sd)
rtabs(~admit + rank, data = mydata)
xtabs(~admit + rank, data = mydata)
mydata$rank <- factor(mydata$rank)
mylogit <- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
summary(mylogit)
confint(mylogit)
confint.default(mylogit)
wald.test(b = coef(mylogit), sigma = vcov(mylogit), Terms = 4:6)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 4:6)
l <- cbind(0, 0 , 0, 1, -1, 0)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), L = 1)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), L = l)
exp(coef(mylogit))
exp(cbind(OR = coef(mylogit), confint(mylogit)))
coef(mylogit)
newdata1 <- with(mydata, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata1
head(shuttle)
summary(shuttle)
str(shuttle)
mdl <- glm(use ~ wind, family = "binomial", data = shuttle)
summary(mdl)
confint(mdl)
exp(cbind(OR = coef(mdl), confint(mdl)))
0.9686888/0.7777778
sapply(mydata, sd)
xtabs(~admit + rank, data = mydata)
mydata$rank <- factor(mydata$rank)
mylogit <- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
summary(mylogit)
confint(mylogit)
confint.default(mylogit)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 4:6)
l <- cbind(0, 0 , 0, 1, -1, 0)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), L = l)
exp(coef(mylogit))
exp(cbind(OR = coef(mylogit), confint(mylogit)))
1/0.7777778
newdata1 <- predict(myplot, newdata = newdata1, type = "response")
newdata1 <- predict(mylogit, newdata = newdata1, type = "response")
newdata1
newdata1 <- with(mydata, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata1
newdata1$rankP <- predict(mylogit, newdata = newdata1, type = "response")
newdata1
newdata2 <- with(mydata, data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 4),
gpa = mean(gpa), rank = factor(rep(1:4, each = 100))))
newdata3 <- cbind(newdata2, predict(mylogit, newdata = newdata2, type = "link", se = TRUE))
newdata3 <- within(newdata3, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
## view first few rows of final dataset
head(newdata3)
ggplot(newdata3, aes(x = gre, y = PredictedProb)) + geom_ribbon(aes(ymin = LL,
ymax = UL, fill = rank), alpha = 0.2) + geom_line(aes(colour = rank),
size = 1)
newdata2
newdata3
with(mylogit, null.deviance - deviance)
with(mylogit, df.null - df.residual())
with(mylogit, df.null - df.residual
with(mylogit, df.null - df.residual)
with(mylogit, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
logLik(mylogit)
head(shuttle)
str(shuttle)
mdl2 <- glm(use ~ wind + magn, family = "binomial", data = shuttel)
mdl2 <- glm(use ~ wind + magn, family = "binomial", data = shuttle)
summary(shuttle)
summary(mdl2)
coef(mdl2)
exp(cbind(OR = coef(mdl2), confint(mdl2))
exp(cbind(OR = coef(mdl2), confint(mdl2)))
exp(cbind(OR = coef(mdl2), confint(mdl2)))
shuttle
exp(cbind(OR = coef(mdl2), confint(mdl2)))
exp(cbind(OR = coef(mdl), confint(mdl)))
1/0.69523
str(shuttle)
mdl3 <- glm((1 - use) ~ wind, family = "binomial", data = shuttle)
mdl3 <- glm((1 - 1 * use) ~ wind, family = "binomial", data = shuttle)
mdl3 <- glm((1 - I(1 * (use == 'auto') + 1 * (use == 'noauto'))) ~ wind, family = "binomial", data = shuttle)
mdl3 <- glm((1 - I(1 * (use == 'auto') + 1 * (use == 'noauto'))) ~ wind, family = "binomial", data = shuttle)
mdl3 <- glm(I(1 * (use == 'auto') + 1 * (use == 'noauto')) ~ wind, family = "binomial", data = shuttle)
I(1 * (shuttle$use == 'auto') + 1 * (shuttle$use == 'noauto')
_
I(1 * (shuttle$use == 'auto') + 1 * (shuttle$use == 'noauto'))
shuttle$use == 'auto'
1 * (shuttle$use == 'auto')
mdl3 <- glm(I(1 * (use == 'auto')) ~ wind, family = "binomial", data = shuttle)
mdl3 <- glm((1 - I(1 * (use == 'auto'))) ~ wind, family = "binomial", data = shuttle)
summary(mdl3)
exp(coef(summary(mld3)))
exp(coef(summary(mdl3)))
summary(mdl)
summary(mdl3)
mdl3 <- glm((1 - I(1 * (use == 'noauto'))) ~ wind, family = "binomial", data = shuttle)
summary(mdl3)
exp(coef(summary(mdl3)))
summary(mdl)
summary(mdl3)
data("InsectSprays")
dim(InsectSprays)
InsectSprays
str(InsectSprays)
str(InsectSprays)
head(InsectSprays)
exp(-0.056)
mdl4 <- glm(count ~ spray, family = "poisson", data = InsectSprays)
summary(mld4)
summary(mdl4)
exp(0.05588)
exp(-0.05588)
mdl <- glm(use ~ wind, family = "binomial", data = shuttle)
summary(mdl)
exp(cbind(OR = coef(mdl), confint(mdl)))
exp(0.03181)
summary(mdl2)
coef(mdl2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
knots
x
knots
x
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
y
plot(x, y)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(1, x, x^2, splinTerms)
yhat <- predict(lm(y ~ xMat - 1))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ x - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ splineTerms))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ splineTerms - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- c(-5, 0, 5)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot) ^2)
xMat <- cbind(0, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y ~ xMat - 1))
yhat <- predict(lm(y ~ xMat))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
