# Example: predicting wages
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
# Get training/test sets
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
# Feature plot
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
# Plot age versus wage
qplot(age, wage, data = training)
# Plot age versus wage colour by jobclass
qplot(age, wage, colour = jobclass, data = training)
# plot age versus wage colour by education
qplot(age, wage, colour = education, data = training)
# Fit a linear model
modFit <- train(wage ~ age + jobclass + education, method = "lm", data = training)
finMod <- modFit$finalModel
print(modFit)
# Diagnostics
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
# Color by variables not used in the model
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
# Plot by index
plot(finMod$residuals,pch=19)
# Predicted versus truth in test set
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
# Use all covariates
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
## Predicting with trees
# Example: Iris Data
data(iris); library(ggplot2); library(caret)
names(iris)
table(iris$Species)
# Create training and test sets
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
# Iris petal widths/sepal width
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
# Plot Tree
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
# Prettier plots
if(require(rattle) == FALSE) install.packages("rattle")
setwd("./Chapter9.Developing_Data_Products/")
ls
dir()
setwd("./2. Basic html and getting input/")
setwd("./..")
dir()
runApp("./2. Basic html and getting input/")
library(shiny)
runApp("./2. Basic html and getting input/")
runApp("./2. Basic html and getting input/")
runApp("3. Illustrating inputs in ui.R/server.R")
runApp("3. Illustrating inputs in ui.R/")
runApp("3. Illustrating inputs in ui.R/")
runApp("3. Illustrating inputs in ui.R/")
runApp("3. Illustrating inputs in ui.R/")
library(shiny)
library(shiny)
runApp("4. Creating a very basic prediction function/")
library(shiny)
library(shiny)
runApp("5. Working with images/")
runApp("6. Experiment/")
runApp("6. Experiment/")
runApp("6. Experiment/")
runApp("6. Experiment/")
runApp("6. Experiment/")
runApp("6. Experiment/")
runApp("6. Experiment/")
if(require(shiny) == FALSE) install.packages("shiny")
if(require(manipulate) == FALSE) install.packages("manipulate")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
siderbarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp(ui = shinyUI, server = shinyServer)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
siderbarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp(ui = )
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
siderbarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
siderbarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
server <- shinyServer(
function(input, output) {
}
)
runApp(ui = shinyUI, server = shinyServer)
runApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
shinyApp(ui = shinyUI, server = shinyServer)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = ui)
shinyApp(ui = ui, server = ui)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = ui)
shinyApp(ui = ui, server = server)
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
server <- shinyServer(
function(input, output) {
}
)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
h3('Illustrating outputs'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("odate")
)
))
server <- shinyServer(
function(input, output) {
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$odate <- renderPrint({input$date})
}
)
shinyApp(ui = ui, server = server)
ui <- shinyUI(
pageWithSidebar(
# Application title
headerPanel("Diabetes prediction"),
sidebarPanel(
numericInput('glucose', 'Glucose mg/dl', 90, min = 50, max = 200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
)
diabetesRisk <- function(glucose) glucose / 200
server <- shinyServer(
function(input, output) {
output$inputValue <- renderPrint({input$glucose})
output$prediction <- renderPrint({diabetesRisk(input$glucose)})
}
)
shinyApp(ui = ui, server = server)
ui <- shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mean',value = 70, min = 62, max = 74, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
server <- shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyApp(ui = ui, server = server)
ui <- shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
x <<- 0
x <<- x + 1
y <<- 0
server <- shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
shinyApp(ui = ui, server = server)
ui <- fluidPage()
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("Hello world")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
?sliderINput
?sliderInput
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
c("adf", "sadf")
paste("asdf", "adfa")
# Using template
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste(input$num, "100 random normal values")
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
# Using template
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste(input$num, " random normal values")
hist(rnorm(input$num), main = title)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('6. Experiment')
shiny::runApp('6. Experiment')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(devtools)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- paste(input$num, " random normal values")
hist(rnorm(input$num), main = title)
main = input$title
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = title)
main = input$title
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
output$stats <- renderPrint({
summary(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data, main = input$title)
})
output$stats <- renderPrint({
summary(data)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage("hellow world",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Historgram of Random Normal Values"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = input$title)
})
output$stats <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
